702.3 Container Infrastructure (weight: 4)
Weight: 4

Description: Candidates should be able to set up a runtime environment for containers. This includes running containers on a local workstation as well as setting up a dedicated container host. Furthermore, candidates should be aware of other container infrastructures, storage, networking and container specific security aspects. This objective covers the feature set of Docker version 17.06 or later and Docker Machine 0.12 or later.

Key Knowledge Areas:

- Use Docker Machine to setup a Docker host <- 1 ----- DOCKER MACHINE -----
- Understand Docker networking concepts, including overlay networks 2
- Create and manage Docker networks 3
- Understand Docker storage concepts 4
- Create and manage Docker volumes 5
- Awareness of Flocker and flannel 6
- Understand the concepts of service discovery 7
- Basic feature knowledge of CoreOS Container Linux, rkt and etcd 8
- Understand security risks of container virtualization and container images and how to mitigate them <- 9 ----- CONTAINER SEC -----

The following is a partial list of the used files, terms and utilities:
- docker-machine

=== YOUR NOTES ===

- Mastering docker: Page 309. Docker workflows!
Curious to see how launching containers in read-only mode goes.

=== YOUR NOTES ===


1 ----- DOCKER MACHINE -----

Following up chapter 5 of Mastering Docker!
I'll only launch hosts on virtualbox for now.

docker-machine create --driver virtualbox docker-local
Runs a bunch of checks (such as checking that virtualbox is present), downloads boot2docker, creates a vm, sets up ssh keys, does a few docker things and bam, docker machine

docker-machine env docker-local
Lists environment variables for your docker-local docker machine. This will show you how to connect to the machine.

By running: eval $(docker-machine env docker-local)
You configure your docker client to connect to the docker server on the docker machine. This way you can interact with it as if it were a normal docker install on your local.

docker-machine ls
Shows you the available docker machines. The one with the asterisk is the active one!

You can also find a bunch of things about your docker-local machine:

docker-machine ip docker-local
docker-machine inspect docker-local
docker-machine config docker-local
docker-machine status docker-local
docker-machine url docker-local


1 ----- DOCKER MACHINE -----



9 ----- CONTAINER SEC -----

Excited about this one!

CONTAINER CONSIDERATIONS

Docker containers are not virtual machines! Remember to adhere to container specific best practices.
Put everything in your Dockerfiles, don't install packages you don't need, run a single process, and don't install/configure stuff in ad-hoc manners.

ADVANTAGES

Everytime you start a container, docker sets up a namespace and a control group.
By setting up a namespace, docker keeps the process isolated in each container. Processes are not only isolated from each other, but also from the host system.
Control groups ensure that each container gets it's own share of CPU, memory, disk and that they don't use all the resources on a docker host.

Docker supports easy network separation, so all of applications A containers can be easily isolated from containers used by application B.
Network isolation can run on a single docker host or be spawned across multiple ones using docker swarm

One of the advantages presened by the author of Mastering Docker is that "you shouldn't have to log in into the container". I believe this is more of a paradigm shift instead of something that could be counted as an advantage.
Docker has functionalities to keep you from having to run additional processes inside a container, such as docker container exec, docker container top, docker container logs, docker container stats and so on.
You should be able to do everything you need without exposing more services than you need to.

THE DOCKER HOST

When dealing with virtual machines, you can control who accesses a given VM and who doesn't. User1 can only have access to VM1, while user2 could only have access to vm2.
In docker this isn't possible. Whoever has access to the docker engine on a docker host has access to every single docker command. Be careful with who gets access to the docker host!
On a docker host, it is recommended to keep docker hosts just for docker.

IMAGE TRUST

Onl get images from official mirrors and trusted sources.
It is not recommended to download or publish images that are not created using dockerfiles.
Do not publish images with custom changes and/or passwords.

DOCKER COMMANDS THAT CAN HELP WITH SECURITY

There are a few commands that can help you with image security, as well as to double check a few security related things.

RUN

There's an option on the docker run command that allows you to set everything inside a container as read only:

docker container run -d --name mysql --read-only -v /var/lib/mysql -v /tmp -v /var/run/mysqld -e MYSQL_ROOT_PASSWORD=banana mysql

This sets up the entire container as read only, except the volumes with the -v flag before them. Anything else in the container won't be writeable:

docker container exec mysql touch /trying_to_write_a_file #fails

However, I can see this being difficult to set up in the real world as you never know exactly where applications will end up writing, especially as releases happen and so on.
Test this thoroughly if you plan on using it!

You can also have a normal container in which things are read-write, but then mount a volume as read only:

docker container run -d -v /local/path/to/html:/var/www/html:ro nginx

DOCKER DIFF
Great way to spot if something dodgy is going on.

The docker container diff <container> command returns differences in the filesystem that are in place since the container launched.
It compares the files in the default image for that container and files that have been changed since the container launched.

BEST PRACTICES (which are security relatable!)

One only application per container - Docker was built for this. Split things up between containers, this will make everything easier to manage, and it is the docker way(TM) of doing things.
Install only what you need - You shouldn't need vim and ssh inside a container, or unused libraries. This keeps your image small and reduces attack vectors.
Review who has access to your docker hosts - Remember that whoever has root access to your docker hosts can do whatever he/she wants. Be careful with this access!
Have the latest version of docker installed - This makes sure you have receive security updates as they come out.
Use the resources: The author encourages you to do proper research and read the docker forums/community posts, as well as the official documentation. In my other words: Google it my child.

The book points you to the CIS security benchmark for Docker: https://www.cisecurity.org/benchmark/docker/

That may be a faily lenghty guide. The book then describes how we can run the Docker Bench Security Application!

TESTING FOR VULNERABILITIES:

Let's spawn some instances with some bad practices regarding security:


docker container run -d --name root-nginx -v /:/mnt nginx
docker container run -d --name priv-nginx --privileged=true nginx
docker container run -d -P --name sshd eg_sshd

To run a security scan on your system, do:

docker run -it --net host --pid host --cap-add audit_control \
-e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
-v /var/lib:/var/lib \
-v /var/run/docker.sock:/var/run/docker.sock \
-v /usr/lib/systemd:/usr/lib/systemd \
-v /etc:/etc --label docker_bench_security \
docker/docker-bench-security

This is very nice! It gives you a through security check.

You'll get 3 types of output:
PASS: All good!
INFO: Items you should review if you feel they're pertinent to your setup
WARN: Items that need to be fixed. You don't want to see those!
NOTE: Best practice advice

From the default install, there's quite a bit to fix. It checks, among other things: Host configuration, docker daemon configuration, docker images and build files, container run time, docker security ops (best practices) and docker swarm config.


9 ----- CONTAINER SEC -----