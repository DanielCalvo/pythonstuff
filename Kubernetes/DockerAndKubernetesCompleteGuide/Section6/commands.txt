#6.59 Development workflow
#Theoretical lecture. Explains that applications are developped, tested and then deployed.

#6.60 Flow specifics
#Things pull & push into a feature branch
#Create a pull request and merge into master
#Every time we marge into master, run tests on Travis CI
#If the tests pass, we'll deploy it on Amazon AWS.

#3 phases to the project: Dev, Test and Prod
#On the dev phase, all changes are made to the feature branch

#As soon as we make that PR, we'll Travis CI to pull that feature branch and run tests against it
#If all tests pass, merge to master
#After merging to master, run all tests again
#If all passes, deplou to AWS Elastic beanstalk

#6.61 Docker's purpose
#We don't need to use Docker to make this workflow possible, docker is just a tool that makes executing these tasks easier.

#6.62 Project Generation
#Just installed nodejs

#6.63 More on project generation
npm install -g create-react-app #as root

#6.64 Necessary commands
#Commands we'll run working with the project:
#Starts a development server (not for prod)
npm run start
#Runs tests associated with the project
npm run test
#Builds a production version of the application
npm run build

#6.65 Creating the dev dockerfile
#Two dockerfiles, one for development, another one in production!
#The dev one has npm run start
#The prod one has npm run build
docker build -f Dockerfile.dev

#6.66 Duplicating dependencies
#I just deleted node_modules, just like I do in the office to release, ha-ha. Then rebuild the image:
docker build -f Dockerfile.dev .

#6.67 Starting the container
docker run 204314234080
#Ah, we need to expose the port!
docker run -p 3000:3000 204314234080

#Remember that if you change something on your computer after the docker image has been built, you will need rebuild the image or find another solution!

#6.68 Note for Windows users
#I'm doing this on Linux

#6.69 Docker volumes
#The volume sets up a reference that's going to point back to our local machine
#Setting up a volume can be a bit of a pain due to the syntax?
#Syntax is:
#docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app <image_id>
docker build -f Dockerfile.dev .
docker run -p 3000:3000 -v $(pwd)/frontend:/app f56497cebdef
#the above fails

#6.70 Bookmarking Volumes
#We do not have node_modules on the current working directory as we had previously deleted them
#When you use the colon on the volume setting, you're explicitly mapping a folder inside the container, to a folder outside the container
#áº„hen you do not use a colon, you say that you want this to be a placeholder for a folder that is inside the container. Don't try to map it up against anything
docker run -p 3000:3000 -v /app/node_modules -v $(pwd)/frontend:/app f56497cebdef
#If I modify the file on my local machine now, it shows up on the container

#6.71 Shorthand with docker compose
#Added the docker-compose.yml file with the volumes

#6.72 Overriding dockerfile selection
#Added context and dockerfile location to the docker-compose.yml file

#6.73 Do we need copy?
#Since we're using volumes in docker compose, we can remove the copy line in the dockerfile. The "COPY package.json ." line was left there to run npm install
#But the line to copy all the source code "COPY . ." we can remove. The author recomends keeping the COPY instruction.

#6.74 Executing tests
docker build -f Dockerfile.dev .
docker run ebaf43fdb2ed npm run test
docker run -it ebaf43fdb2ed npm run test  #Much better!

#6.75 Live updating tests
#When you create a container, you take a snapshot of all your files and folders and put that inside the container
docker-compose up
docker ps
docker exec -it a131b5afaaa0 npm run test

#6.76 Docker compose for running tests
#Added the tests service under docker-compose.yml
#Uh-oh! When you change the test file, the test runs again!
#Same as when I modify a file that is being used by the web container. Neat!

#6.77 Shortcomings on testing
#We can try to attach stdin/stdout to the test container
docker-compose up --build
docker ps
docker attach 07e60cdebf52 #Doesn't work :(
#Looks like you can't attach to a container when you launch it with docker compose
docker ps
docker exec -it 07e60cdebf52 sh
#When you run docker attach, you always attach to the primary process of the container, with a PID of 1.
#But this process may have in turn launched another processes, like npm run tests does.
#You could launch the test container only with docker exec, the benefit being that we can manipulate the test suite, but the downside being you have to memorize the long docker exec command, as well as get the ID of the container every time.

#6.78 Need for nginx
#We need a webserver to run our app in production
#We run npm build and work with index.html and main.js
#We're going to create a production dockerfile, yay!

#6.79 Multi step docker builds
#Looks like we're going to have two builds images! :o
#Uh-oh, a multi step build process!
#There will be a build base and a run phase. Awesome!

#6.80 Implementing multi-step builds
#Created the Dockerfile for production

#6.81 Running nginx
docker build .
docker run -p "8080:80" 307be2dfaddb
#Yaaay it works!