#14.183 The path to production
#Frick yeah moving to production!

#14.184 Checkpoint files
#All good!

#14.185 A quick checkpoint
#Deleted a bunch of stuff

#14.186
#Created the client-deployment.yaml

#14.187 NodePort vs ClusterIP Services
#ClusterIP: Exposes a set of pods to other objects in the cluster. A ClusterIP does not allow traffic from the outside world to come in!
#NodePort: Exposes a set of pods to the outside world (only for dev!)
#We're going to use the Ingress service to let traffic come in to inside the cluster.

#14.188 The ClusterIP config
#Wrote it down. Getting the hang of it!

#14.189 Applying multiple files with kubectl
#Delete old deployment:
kubectl delete deployment client-deployment

kubectl get services
#Delete the client-node-port if it's still there too

kubectl apply -f k8s #Applies all the config files in the directory

kubect get pods
kubectl get services


#14.190

#14.194
kubectl get pods
kubectl get deployments
kubectl get services
kubectl logs server-deployment-68cdfcf694-7f5lg

#14.197
#PVCs!
#PVC stands for persistent volume claim
#If you don't have a PVC and your pod goes away, you lose all the data :(
#You don't want to have two copies of postgres accessing the same volume if they're not aware of each other (don't bump the replica number to anything higher than 1)

#14.198 Kubernetes volumes
#Volume in container terminology: Some type of mechanism that allows a container to access a filesystem outside itself
#Voume in Kubernetes: An object that allows a container to store  data at the pod level

#There are three types of volumes in Kubernetes:
#Volume <- Not exactly a docker volume!
#Persistent Volume <- We want these for our Postgres
#Persisten Volume Claim <- We want these for our Postgres

#In Kubernetes, a volume is tied to a pod. If the pod itself ever dies, the volume goes away with it. The volume survives containers restarts inside the pod, but it the pod gets deleted or restarted, the volume is gone.
#With a persistent volume, the volume is not tied to any specific pod or container. Even if you restart a pod or a container, it stays alive and isn't deleted
#Persistent volume claims are a bit more elaborate. You need to define on yaml files. There are statically provisioned persistent volumes, and dynamically provisioned persistent volumes



#14.202
#Access modes:
#ReadWriteOnce: Can be used by a single node
#ReadOnlyMany: Multiple nodes can read from this
#ReadWriteMany: Can be read and written by many nodes

#14.203
kubectl get storageclass
kubectl describe storageclass
#When using a cloud environment, you need to specify a storage option, as opposed to relying on the defaults. Oh wait, or on a cloud environment the default might be different than the default on minukube



#14.205
kubectl apply -f k8s
kubectl get pods
kubectl get pv
kubectl get pvc


#14.208 creating and encoded secret
#We're going to do it imperatively, as writing a secret on a .yaml plain text file and upload it to the repo defeats the purpose of a secret
kubectl create secret generic <secret name> --from-literal key=value
#When we eventually move to production we're also going to have to run the command :o
kubectl create secret generic pgpassword --from-literal PGPASSWORD=mypassword123
kubectl get secrets

#14.209 Passing secrets as environment variables

#14.210 Environment variables as strings
#Kubernetes encountered an error while going through the PG port and the REDIS_PORT.
#Whenever you provide an environment variable in Kubernetes, you have to provide it as a string
