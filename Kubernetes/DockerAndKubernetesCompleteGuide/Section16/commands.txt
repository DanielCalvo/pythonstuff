#16.221 The deployment process

#To calculate how much we're going to spend on google cloud: https://cloud.google.com/products/calculator/
#Ruh-roh, might be expensive if I'm not careful.

#16.222 Google cloud vs AWS for Kubernetes
#Opinions from the author:
#Google created Kubernetes
#AWS Only recently got Kubernetes support
#Far easier to use Kubernetes on Google cloud
#Excellent documentation for beginners!


#16 General notes:
Remember to clean up when you're not studying!
https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/v4/t/lecture/11684242?start=0

Course goes on travis ci, adds the repo, creates kubernetes cluster on google cloud.
I went for "My first cluster" setting which seems to be the most affordable one

#16.234 Generating a service account
Create service account
Download service account credentials in a json file
Download and install the Travis CLI
Encrypt and upload the json file to our travis account
In travis.yml, add code to unencrypt the json file and load it in to GCloud SDK


#16.235 Running travis CLI in a container

docker run -it -v $(pwd):/app ruby:2.3 sh
gem install travis --no-rdoc --no-ri
gem install travis
travis login
#Copy json file into the 'volumed' directory so we can use it in the container
travis encrypt-file service-account.json



#16.243 Configure the GCloud CLI on cloud console
gcloud config set project danielcalvo
gcloud config set compute/zone us-central1-a
gcloud container clusters get-credentials your-first-cluster-3

#16.244 Creating a secret on Google Cloud
#On the Google shell
kubectl get pods
kubectl create secret generic pgpassword --from-literal PGPASSWORD=password123
#You can now see the secret under the "Configuration" part of the Kubernetes engine. Cool!

#16.245 Helm setup
#Looks like we have to install the ingress as a separate service
#We can use helm to install it!
#Helm is a program to administer third party software inside our Kubernetes cluster
#github.com/helm/helm
#When you install helm, you actually get two pieces of software
#You get the helm client (CLI tool) and the Tiller Server. Tiller is a server running inside the cluster, responsbiel for modifying our cluster and installing additional objects inside of it.
#The relation ship between Helm and Tiller is analogous to the relationship between Docker Client and Docker Server running on your local machine
#https://docs.helm.sh/using_helm/#quickstart
https://docs.helm.sh/using_helm/#from-script
#Run the above commands on gcloud
#Do not run helm init yet!

#16.246 Kubernetes sercurity with RBAC
#RBAC = Role based access control
#Limits who  can access and modify objects in our cluster.
#Enabled by Google cloud by defailt.
#Tiller wants to change some things on our cluster, so it needs to get some permissions set
#User accounts: Identifies a person administering our cluster. Humans.
#Service accounts: Identifies a pod administering a cluster.
#You create a RoleBinding and then assign them to a User account or a Service account.
#Role bindings allow you to do things
#ClusterRoleBindings: Authorizes an account to do a certain set of actions across the entire cluster
#RoleBinding: Authorizes an account to do a single set of actions in a single namespace
#We need to create a ServiceAccount and ClusterRoleBinding
#And then tie the ClusterRoleBinding to the ServiceAccount

#16.247 Assigning Tiller a service account
kubectl create serviceaccount --namespace kube-system tiller
#Create a new service account called tiller in the kube-system namespace

kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
#Create a new clusterrolebinding with the role 'cluster-admin' and assign it to the service account 'tiller'
#The name of the service account is tiller but it exists in the kube-system namespace

helm init --service-account tiller --upgrade

#16.248 Ingress-nginx with Helm
https://kubernetes.github.io/ingress-nginx/deploy/#using-helm
helm install stable/nginx-ingress --name my-nginx --set rbac.create=true

#16.249 The result of Ingress-nginx
#On the workloads tab, an ingress controller and default backend should show up!
#On the services tab, you should also see the controller and the backend
#Under the networking session on the left there's networking services, you'll see a google cloud load balancer.

#16.250 Finally deployment!
#If travis-ci doesn't start, check for typos
#Uh-oh, looks like it failed

#16.251 Did I really type that?
#Oh Stephan, PASSSWORD with 3 "s".

#16.252 Verifying deployment
#Check tags on dockerhub, latest and the SHA ones should be up to date!
#There should be a bunch of deployments on the workload tab
#You should also be able to see the services on the service tab
#The ingress service should contain the two routes you set up on the yaml
#It actually worked! I want to try this!

16.253 A Workflow for changing in prod
Checkout a branch
Make changes
Commit changes
Push to github branch
Create PR
Wait for tests to up up 'green'
Merge PR
See changes appear on prod