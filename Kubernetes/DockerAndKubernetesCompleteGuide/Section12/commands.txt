
#12.157
#Kubernetes is a system to run different types of containers over multiple machines
#If you have an app with just a single container, you usually don't need it
#In production, you use Amazon EKS or Google GKE. Or you host it yourself. Hey hosting it yourself looks like an interesting learning oportunity
#In development however, you use minikube!
#We're going to be using kubectl to interact with your kubernetes cluster, and the minikube command to manage the development VMs
#Remember that minikube is only for your local and for learning!
#You need to install kubectl, virtualbox with a driver and minikube.

#12.158 Setup on MacOX
#kubectl was available through apt-get on ubuntu 18.04
#Downloaded and installed virtualbox from Oracle's website
#Downloaded the minikube binary from the kubernetes website

#12.159 Mapping existing knowledge
minikube status
kubectl cluster-info
#Everything is ok!
#Goal: make the multi-client image running on our local Kubernetes cluster
#With docker compose, we specified how to build the images, pointing to a dockerfile as well as specifying context (on the build section!)

services:
  nginx:
    build
    ports
  worker:
    build
    ports
  client:
    build
    ports

#Each entry can optionally get docker-compose do build an image
#Each entry represents a container we want to create
#Each entry defines the networking requirements (ports)
#Author states, to keep in mind: We only created containers with docker compose

#Mapping this knowledge to Kubernetes:

#1 Each entry can optionally get docker-compose do build an image -> Kubernetes expects all images to be already built
#2 Each entry represents a container we want to create -> One config file per object we want to create (multiple config files, an object might not necessarily be a container)
#3 Each entry defines the networking requirements -> We have to manually set up all the networking

Actions we're going to take:
#1 Make sure our image is hosted in dockerhub
#2 Make one config file to create the container
#3 Make one config file to set up networking

#12.160 Adding configuration files
#Checked all my images on dockerhub, yep, it's all there
#Created simplek8s directory and client-pod.yaml
#Typed a lot of stuff, author claims he'll walk us through it later

#12.161 Object types and API versions
#A config file is used to create objects
#Some examples of objects are: Pod, Service, ReplicaController and Statefulset

#The entry "kind" inside the yml definitions we just wrote is meant to indicate the object type that we want to make
#The object type "Pod" is used to run a container
#Other types of objects might monitor containers or set up networks

#The apiVersion scopes or limits the type of objects that you can create with a given config file. In other words: Each API version defines a different set of objects we can use
#Using the type v1 grants access to a predefined set of object types such as componentStatus, configMap, Endpoints, Event, Namespace and Pod
#If we had used a different apiVersion, such as "apps/v1", we would've gotten access to a different set of object types, such as ControllerRevision and StatefulSet

#12.162 Running containers in pods
#The smallest thing you can have in kubernetes, as far as containers go, is a pod. You will always be running containers inside a pod. A pod runs inside a node. A node can be a physical or virtual machine
#In kubernetes, you cannot deploy containers individually (not without a pod)
#The purpose of a pod is to allow the grouping of containers with a very similar purpose.
#Example of a pod: Postgres container, logger container, backup manager container.

#12.163 Service config files in depth
#Pods --> Runs one or more closely related containers
#Services --> Sets up networking in a Kubernetes cluster
#Both of these are object types!

#In the world of pods, we have pretty much just pods.
#In the world of services, we have four commonly used types:
#ClusterIP
#NodePort
#LoadBalancer
#Ingress

#Inside our file, we specified a subtype of NodePort. The purpose of a NodePort service is to expose a container to the outside world. Only good for dev purposes!
#This lecture is really dense, it's difficult to watch all of it here. Watch again if you must!
#The pod and service a are linked by the label inside the pod config, and the selector inside the service

#12.164
#Feed a config file to kubectl
#kubectl apply -f <filename>
minikube start
kubectl apply -f client-pod.yaml
kubectl apply -f client-node-port.yaml
kubectl get services

#Last command gives out:
NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
client-node-port   NodePort    10.107.194.65   <none>        3050:31515/TCP   5h17m
kubernetes         ClusterIP   10.96.0.1       <none>        443/TCP          2d14h

#The kubernetes service we can ignore
#We have a nodeport service! It has the port and nodeport property, like port:nodePoert/TCP. targetPort is not reported.
#To get the IP that minikube is using for the VM, you need to type:
minikube ip
#Got 192.168.99.100, so it's at http://192.168.99.100:31515/

#12.165 The entire development flow
#Author explains the kube-apiserver master and the nodes and load balancing and all that. Cool lecture!
#You don't login into the kubernetes nodes to do work directly, you always do things through the master

#12.166 Imperative vs Declarative deployments
#Important takeaways
#Kubernetes is a system to deploy containerized apps
#Nodes are individual machines (physical or virtual) that run containers
#Masters are machines (phys or virt) with a set of program to manage nodes
#Kubernetes does not build our images -- it gets them from somewhere else
#The Kubernetes master decides where to run each container. Nodes can run dissimilar containers
#To deploy something, we update the desired state of the master with a config file
#The master works constantly to meet your desired state

#There appear to be two styles when it comes to deployments
#Imperative deployments: Do exactly these steps to arrive at this container set up
#Declarative deployments: Our container set up should look like this. Make it happen!

#Declarative seems better instead of checking pods manually
#Some resources on the internet might contain instructions to do things in an imperative way, others in a declarative way
#Declarative way is the way to go for production