121: Storage:
Section keeps scope to Kubernetes only
(Follow up from Dani: Can you follow up with a google search for "storage for kubernetes"?)


123:  Volumes
We can attach a volume to a pod, and whatever data is generated in that volume, persists.
You can specify a bunch of options we'll see later. You can specify among other things a hostPath.

It is not recommended to use hostPath on volumes, as you'll be storing data on the host.
Your pods would expect the data in there to be consistent across all hosts, which won't happen

Kubernetes supports a bunch of storage solutions: NFS, GlusterFS, Flocker, Ceph, ScaleIO, and vendor ones from AWS and GCP.


124: Persistent volumes
Regular volumes would have to configure manually on every single pod yaml on the cluster.
Instead you can manage storage centrally. A persistent volume is a cluster wide pool of storage volumes configured by an administrator, to be used by users deploying applications on the cluster.
The users can choose storage from this pool using persistent volume claims.

Let's create a persistent volume! Take a look at 124_pv.yaml
kubectl apply -f 124_pv1.yaml
kubectl get persistentvolume


125: Persistent volume claims (PVCs)
An admin creates a PV
An user creates a PVC to use the storage
Once a PVC is created, Kubernetes binds the PVC to a PV based on the properties of the request.
Every PVC is bound to a single PV.
You can still use labels and selectors in case you want to bind your PVC to a specific PV.
If there are no volumes available, the PVC claim will remain pending until new volumes are made available.
Have a look at 125_pvc.yaml
kubectl create -f 125_pvc.yaml
kubectl get persistentvolumeclaim

There is a persistentVolumeReclaimPolicy. By default it is retain, which means your PVC will stay there until it's manually deleted.

(Follow up from Dani: The explanation here was nice, but very generic. I think you should try implementing a storage solution on cloud and/or on premise and seeing how this works)

Continue on the exercise section at 126.

126: Volume exercises
If the modes on the PV and PVCs do not match, a PVC cannot be alocated on a PV.
(Follow up from Dani: How do we get kubectl autocomplete?)
(Follow up from Dani: These exercises were really boring! Follow up on PVs, PVCs and pod/deployment mounts later)