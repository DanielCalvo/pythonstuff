7. Five important questions

How do we run the code in our project?
go run main.go

But wait, there's more:

go build: Compiles go source code
go run: Compiles and executes code
go fmt: Formats all the code in each file in the current directory
go install: Compiles and installs a package
go get: Downloads the source code of someone else's package
go test: Runs any tests associated with the current project


8. Go packages
What does 'package main' mean?
Package == Project == Workspace
A package is a collection of common source files.
Every first line of a file must declare the package that it belongs to.

There are two different types of packages in Go: Executable and Reusable.
Executable: Generates a file that we can run.
Reusable: Code used as 'helpers'. Where you put the reusable logic. Code dependencies or libraries.
It's the name of the package that you use that determines of you're making a executable or reusable type package.
"main" is used to make an executable package. If we had named the package something else, we wouldn't have gotten an executable.
Package main must have a func called main.


9. Import statements
The import package gives our package access to some code that is written inside another package.
The fmt library is used to print out stuff.
golang.org/pkg


10. File organization
func is short for function
Files in go always follow a patten: package, import, func


O program that suffles cards, uh-oh!

Go is statically typed!
Python is dynamically typed

Basic types available: bool, string, int, float64

":=" is only used when definining a variable the first time!

15.
You need to tell which data type you intend on returning from a function, ie:
func mything() string {
    return "banana"
}

16. Slices and for loops
Array = Fixed lenght list of things
Slice = An array that can grow or shrink
Every element in a slice must be of the same type

fruits := []string{"banana", "apple"}
Creates a slice named fruit of type string with the strings banana and apple

fruits = append(fruits, "orange")
The append function returns a new slice, so we must re-assign it to the fruit slice

When iterating through a silce, you do:

for i, fruit =: range fruits {
    fmt.Println(i, card
}

Every time yo go over an element in fruits, go throws away the i and fruit variables, which is why initialize them with := every time


17:
Go is not object oriented :o
We're going to take a type (such as an array) and we're going to extend it's functionality


19:
func (d deck) print() {
d: The actual copy of the deck we're working on is available in this function as a variable called 'd'
deck: Every variable called deck can call this function on itself
}
The receiver sets up methods on variables that we create

22: This:
func deal(d deck, handSize int) (deck, deck) {

Will receive as argument one variable of type deck, and another one of type int.
It will then return two variables of the type deck. It can be a bit confusing at first to see those two sets of parenthesis there.


23:
Any time you see a square bracket, you wanna be thinking of a slice

You stopped on lecture 27


30:
Stephen says: A lot of learning go is learning how to navigate the documentation for the standard packages.


44:
&variable = Give me the memory address of the value this variable is pointing at
*pointer = Give me the value this memory address is pointing at


47:
Value types: int, float, string, bool, structs. Use pointers to change these things in functions.
Reference types: slices, maps, channels, pointers, functions. Don't worry about pointers with these


48:
In Go, a map is a collection of key-value pairs.
Similar to a Dictionary in Python!
The keys and values are statically type (must be exact same type, string, int, etc)


51:
Map: All keys must be of same type
Map: All values must be of same type
Map: Keys are indexed - we can iterate over them
Map: Use to represent a collection of related properties (such as color names/hex values)
Map: Don't need to know all the keys at compile time

Struct: Values can be of different type
Struct: Keys don't support indexing
Struct: You need to know all the different fields at compile time
Struct: Used to represent a "thing" with a lot of different properties (such all the attributes of a person)
Struct: Value type! (uses pointers)


52:
Interfaces are a big topic in Go!
Every value has a type (string, int, float...)
Every function has to specify the type of it's arguments
So does every function we ever write have to be rewritten to accomodate different types, even if the logic is the same?


53:
Concrete type: Something we can create a value of directly. map, struct, int, string, englishBot
Interface type: You can't create a value directly out of this type


54:
Interfaces are not generic types
Interfaces are implicit
Interfaces are a contract to help us manage types
Interfaces are tough! Step 1 is learning how to read them


70:
The program checks links sequentially, which takes quite some time!
Stephen says we can take a parallel approach to our program


71:
We might wanna figure out a way to fetch multiple requests at the same time.
When you launch a program, you automatically create a Go routine
Every time you use the "go" keyword to launch a function, you are launching a new go routine


72:
The Go scheduler, works with a single CPU. By default, Go attempts to use only a single CPU.
Even though you might launch many Go routines, only one is running at any given time.
The one-core usage setting can be changed. This way multiple routines can be assigned to multiple cores
"Concurrency is not parallelism" - A bunch of people on the Internet.
Concurrency: We can have multiple threads executing code. If one thread blocks, another one is picked up and worked on. These threads might still be running on the same core though!
Parallelism: Multiple threads execute at the exact same time. Requires multiple CPUs. Multiple things, at the exact same nanosecond!
By default, a main routine is created when we launch the program.
All other Go routines are named "child" go routines.
The main and child routines are treated differently. The main one appears to have more priviledges


73:
We only use the go keyword in front of function calls
The main routine finishes before the child routines and we get no output :(
We're going to use another construct in Go called channels
Channels are used to communicate in between different go routines
A channel has a type. A channel can only share type string, int, struct or something like that


74:
channel <- 5 ##Sends the value 5 into this channel
myNumber <- channel ##Wait fora value to be sent into the channel. When we get one, assign it to the variable myNumber
fmt.Println(<- channel) ##Wait for a value to be sent into the channel. When you get one, print it immediately