01:
Author recommends books: Go in action, The go Programming Language, golang-book.com, go by example
golang.org/ref/spec is written in a manner that can be difficult to understand at first
Effective go is easier to get into: https://golang.org/doc/effective_go.html

03:
You can tell the future by looking very closely at the seeds you plant today!
If you have grit and persistence and work every day, you'll get there!


12:
mkdir mygoworkspace
cd mygoworkspace
mkdir bin pkg src


13:
GOROOT and GOPATH are the most important variables for Go


15:
go version
go env
go help
go help fmt 
go fmt $SOURCEFILE #Will properly format a source file (ident, new lines, etc)
go run main.go
go install main.go (moves executable to GOBIN?)
go get $REPO_URL


19:
Every program needs a package main and a func main


20: Packages
Packages: Code that is already written that you can use. Import imports that package
func Println(a .... interface{}) <- Takes any number of arguments
The "... sometime" is how we signify a variatic parameter
the type "interface{}" is the empty interface
every value is also of type "interface{}" (wut?)
The underscore charater (_) throws aways returns
You can't have unused variables in your code


21:
:= is the short declaration operator. It declares a variable and assigns a value to it


22:
The difference between using the short declaration operator and the var keyword is that you can use the var keyword to declare a variable outside a function body
var allows you declare a variable outside a function body
Best practice: Limit the scope of your variable and try to use the short declaration variable
When a variable is initialized but no value is given, the variable is given a default value
The variable is set to the zero value of it's type: https://golang.org/ref/spec#The_zero_value


23:
Go is all about type!
A variable of a certain type can only hold values of that type


27:
In Go you convert types, you don't cast them.
Even if you don't believe, keep doing it!


36:
integers do not have decimals
floats do have decimals


92:
A struct is an agregate data type. It agregates together values of different types.

93:
When embedding structs, the inner type gets promoted to the outer type


96:
Aliasing a type is usually not a good idea unless you want to add methods to it
Todd recommends: Always use the field name. It's clearer!


101:
Functions are all about being modular!
Receivers are a lot like parameters but they attach to a type
Function syntax:
//func (r receiver) identifier (parameters) (return) { ... }
When you define a function, you define it with parameters (if any)
When you call a function, you call it with arguments (if any)
Everything in Go is pass by value!


102:
A receiver in a function is optional


103:
A variadic parameter has to be the last parameter, as it's zero or move arguments


104:
Right when func main exits, everything that is defered then runs
Defer is always gonna run when the containing function exits. Useful to use when opening files, you can have the open and close of files close together, and have the file close "automatically" at some later stage when the function finishes


105:
When you have a receiver, it attaches a function to a type


106:
Interfaces allow us to do polymorphism!
Repeat after me: Keyword, identifier type
keyword identifier type
keyword identifier type
keyword identifier type
Interface is a type
A value can be of more than one type
An interface walks into a bar and says: Hey baby, if got this method, you're my type

We can define the pet interface.
Anybody who has the any type that has the method pet, is also of type animal

Interfaces says: If you have these methods, then you're also my type


110:
Callback is passing a function as argument
Logical programming: Logic is hard to follow, reads messy (according to Todd!)


111:
Clojure: Limiting the scope of a variable


124:
Pointer: Pointing to some location in memory where a value is stored
Asterisk: Gives value stored at an address!
Ampersand: Gives us an address.


125:
When to use pointers: When you have a big chunk of data and you don't want to pass that data around, you can just pass the address of where that data is stored, with a pointer!
Other use case to pointers: To change something at a certain location!
Remember! Everything in Go is pass by value!


131:
Json to go, very cool.: https://mholt.github.io/json-to-go/
type "byte" is an alias for the type "uint8". Neat!

132: 