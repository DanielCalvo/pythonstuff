702.3 Container Infrastructure (weight: 4)
Weight: 4

Description: Candidates should be able to set up a runtime environment for containers. This includes running containers on a local workstation as well as setting up a dedicated container host. Furthermore, candidates should be aware of other container infrastructures, storage, networking and container specific security aspects. This objective covers the feature set of Docker version 17.06 or later and Docker Machine 0.12 or later.

Key Knowledge Areas:

- Use Docker Machine to setup a Docker host <- 1 ----- DOCKER MACHINE -----
- Understand Docker networking concepts, including overlay networks 2
- Create and manage Docker networks 3
- Understand Docker storage concepts 4
- Create and manage Docker volumes 5
- Awareness of Flocker and flannel 6
- Understand the concepts of service discovery 7
- Basic feature knowledge of CoreOS Container Linux, rkt and etcd 8
- Understand security risks of container virtualization and container images and how to mitigate them <- 9 ----- CONTAINER SEC -----

The following is a partial list of the used files, terms and utilities:
- docker-machine

=== YOUR NOTES ===

- Mastering docker: Page 287. Docker security!
Curious to see how launching containers in read-only mode goes.

=== YOUR NOTES ===


1 ----- DOCKER MACHINE -----

Following up chapter 5 of Mastering Docker!
I'll only launch hosts on virtualbox for now.

docker-machine create --driver virtualbox docker-local
Runs a bunch of checks (such as checking that virtualbox is present), downloads boot2docker, creates a vm, sets up ssh keys, does a few docker things and bam, docker machine

docker-machine env docker-local
Lists environment variables for your docker-local docker machine. This will show you how to connect to the machine.

By running: eval $(docker-machine env docker-local)
You configure your docker client to connect to the docker server on the docker machine. This way you can interact with it as if it were a normal docker install on your local.

docker-machine ls
Shows you the available docker machines. The one with the asterisk is the active one!

You can also find a bunch of things about your docker-local machine:

docker-machine ip docker-local
docker-machine inspect docker-local
docker-machine config docker-local
docker-machine status docker-local
docker-machine url docker-local


1 ----- DOCKER MACHINE -----



9 ----- CONTAINER SEC -----

Excited about this one!

CONTAINER CONSIDERATIONS

Docker containers are not virtual machines! Remember to adhere to container specific best practices.
Put everything in your Dockerfiles, don't install packages you don't need, run a single process, and don't install/configure stuff in ad-hoc manners.

ADVANTAGES

Everytime you start a container, docker sets up a namespace and a control group.
By setting up a namespace, docker keeps the process isolated in each container. Processes are not only isolated from each other, but also from the host system.
Control groups ensure that each container gets it's own share of CPU, memory, disk and that they don't use all the resources on a docker host.

Docker supports easy network separation, so all of applications A containers can be easily isolated from containers used by application B.
Network isolation can run on a single docker host or be spawned across multiple ones using docker swarm

One of the advantages presened by the author of Mastering Docker is that "you shouldn't have to log in into the container". I believe this is more of a paradigm shift instead of something that could be counted as an advantage.
Docker has functionalities to keep you from having to run additional processes inside a container, such as docker container exec, docker container top, docker container logs, docker container stats and so on.
You should be able to do everything you need without exposing more services than you need to.

THE DOCKER HOST

When dealing with virtual machines, you can control who accesses a given VM and who doesn't. User1 can only have access to VM1, while user2 could only have access to vm2.
In docker this isn't possible. Whoever has access to the docker engine on a docker host has access to every single docker command. Be careful with who gets access to the docker host!
On a docker host, it is recommended to keep docker hosts just for docker.

IMAGE TRUST

Onl get images from official mirrors and trusted sources.
It is not recommended to download or publish images that are not created using dockerfiles.
Do not publish images with custom changes and/or passwords.

DOCKER COMMANDS THAT CAN HELP WITH SECURITY





DOCKER DIFF
Great way to spot if something dodgy is going on.

BEST PRACTICES

One only application per container
Install only what you need
Review who has access to your docker hosts
Use the resources

9 ----- CONTAINER SEC -----