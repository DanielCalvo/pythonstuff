702.2 Container Deployment and Orchestration (weight: 5)
Weight: 5

Description: Candidates should be able to run and manage multiple containers that work together to provide a service. This includes the orchestration of Docker containers using Docker Compose in conjunction with an existing Docker Swarm cluster as well as using an existing Kubernetes cluster. This objective covers the feature sets of Docker Compose version 1.14 or later, Docker Swarm included in Docker 17.06 or later and Kubernetes 1.6 or later.

Key Knowledge Areas:

- Understand the application model of Docker Compose <- 1 ----- DOCKER COMPOSE -----
- Create and run Docker Compose Files (version 3 or later) 2
- Understand the architecture and functionality of Docker Swarm mode 3
- Run containers in a Docker Swarm, including the definition of services, stacks and the usage of secrets <- 4 ----- DOCKER SWARM -----
- Understand the architecture and application model Kubernetes
- Define and manage a container-based application for Kubernetes, including the definition of Deployments, Services, ReplicaSets and Pods

The following is a partial list of the used files, terms and utilities:
- docker-compose
- docker
- kubectl


=== YOUR NOTES ===

docker-compose up -d --scale=3
How does docker handle load balacing or connectivity in this case?




TODO: On page 196 of mastering docker there's an interesting example of an infrastructure. Can you implement that?
I want to learn more about ingress load balacing!

=== YOUR NOTES ===

1 ----- DOCKER COMPOSE -----

Commands:


docker-compose up
Brings up all instances defined on the docker compose file

docker-compose up -d
Bring up all instances in detached mode

docker-compose ps
Returns the state of all containers relative to the docker compose file on the current directory. All other containers will be ignored

docker-compose config
Validates the syntax of your docker compose file.

docker-compose pull
Will pull all the images for the containers on your docker compose file

docker-compose build
Will execute any build commands it finds in your dockerfile (kinda confusing?)

docker-compose create
Creates, but does not launch the containers in the same way as docker container create does.

The following work the same as the docker commands, except they affect everything defined in the docker-compose file:

docker-compose start
docker-compose stop
docker-compose restart
docker-compose pause
docker-compose unpause

docker-compose top
Shows top processes in the containers spanwed by the docker-compose file. Very similar to docker container top

docker-compose top db
Same as above, but for a specific host

docker-compose logs
docker-compose logs db

docker-compose exec redis ping -c 3 db

docker-compose up -d --scale worker=3
Scales worker containers up to a total of 3.

docker-compose kill
Will kill all containers ungracefuly. Dangerous, avoid.

docker-compose rm
Removes stopped containers

docker-compose down
Stops all containers and networks and removes them

docker-compose down --rmi all --volume
Removes all containers, networks, volumes and images. There will be an error if some other container is using an image you also use on this docker-compose file.
(another container unrelated to what you're doing here might also be using the redis image, for example)


1 ----- DOCKER COMPOSE -----



4 ----- DOCKER SWARM -----

To launch a swarm, let's first launch the manager node by docker machine:

docker-machine create -d virtualbox swarm-manager
docker-machine env swarm-manager
eval $(docker-machine env swarm-manager) #This will make swarm-manager the active docker machine

Now let's create two more machines:

docker-machine create -d virtualbox swarm-worker01
docker-machine create -d virtualbox swarm-worker02

Check if they're alright:
docker-machine ls

This "bootstraps" (what does that mean? :o) our swarm manager:
docker $(docker-machine config swarm-manager) swarm init --advertise-addr $(docker-machine ip swarm-manager):2377 --listen-addr $(docker-machine ip swarm-manager):2377

You'll receive a token from this command. It should look something like this:

docker swarm join --token SWMTKN-1-4upg7xrc1c83xnyz2uh8teuivmomigy20s3thvv57u1cx9gjdu-ansoz5v1jds2e9kjc28d4byjh 192.168.99.100:2377

Then, add your two worker machines to the swarm by running:

docker $(docker-machine config swarm-worker01) swarm join $(docker-machine ip swarm-manager):2377 --token SWMTKN-1-4upg7xrc1c83xnyz2uh8teuivmomigy20s3thvv57u1cx9gjdu-ansoz5v1jds2e9kjc28d4byjh
docker $(docker-machine config swarm-worker02) swarm join $(docker-machine ip swarm-manager):2377 --token SWMTKN-1-4upg7xrc1c83xnyz2uh8teuivmomigy20s3thvv57u1cx9gjdu-ansoz5v1jds2e9kjc28d4byjh

Make sure you're still connected to the swarm manager:
eval $(docker-machine env swarm-manager)

And then you can check your swarm by running:
docker node ls

Since you're connected to your swarm manager, you can see information about it by running:

docker info

(this will tell you, among other things, how many managers and nodes are on your swarm)

You can also use the docker node command to probe the swarm manager and get information from it:

docker node inspect swarm-manager --pretty
docker node inspect swarm-worker01 --pretty

In case you want to perform some maintenance on your manager node, or need to bring it down for some reason, you can promote another node to manager:

docker node promote swarm-worker01

If you run docker node ls at this point, you will see that swarm-worker01 has the MANAGER STATUS of "Reachable". I wonder what that means...

If you demote your swarm-manager node, swarm-worker01 will become the Leader:

docker node demote swarm-manager
docker node ls

eval $(docker-machine env swarm-worker01)
docker node ls

To temporarely remove a node from our swarm, we need to set the node status to drain:

docker node update --availability drain swarm-manager

Once you've set the availability status to drain, you can then for instance, restart the swarm-manager machine:
docker machine ssh swarm-manager
sudo reboot


DOCKER SWARM SERVICES AND STACKS (from Mastering Docker)

As a shortcut, create again your swarm from scratch, assuming you deleted everything:

docker-machine create -d virtualbox swarm-manager
docker-machine create -d virtualbox swarm-worker01
docker-machine create -d virtualbox swarm-worker02
docker-machine create -d virtualbox swarm-worker03
docker $(docker-machine config swarm-manager) swarm init --advertise-addr $(docker-machine ip swarm-manager):2377 --listen-addr $(docker-machine ip swarm-manager):2377
docker $(docker-machine config swarm-worker01) swarm join $(docker-machine ip swarm-manager):2377 --token SWMTKN-1-0ttn6dvnxgo750irwhm2z98096wjynw09omwmfqv7t7mordo6c-44640z3hllqeotim99njv9efv
docker $(docker-machine config swarm-worker02) swarm join $(docker-machine ip swarm-manager):2377 --token SWMTKN-1-0ttn6dvnxgo750irwhm2z98096wjynw09omwmfqv7t7mordo6c-44640z3hllqeotim99njv9efv
docker $(docker-machine config swarm-worker03) swarm join $(docker-machine ip swarm-manager):2377 --token SWMTKN-1-0ttn6dvnxgo750irwhm2z98096wjynw09omwmfqv7t7mordo6c-44640z3hllqeotim99njv9efv

So far we've looked at the docker swarm and docker node family of commands. The next two commands we can look at are:

docker service
docker stack

These allow us to launch, scale and manage containers within the swarm cluster.

DOCKER SERVICE

The service command is a way of launching containers to take advantage of a swarm cluster.
Let's create a service!

docker service create --name cluster --constraint "node.role == worker" -p:80:80/tcp russmckendrick/cluster

This creates a service named cluster that is made up of a single container with port 80 mapped from the container to the host machine.
It will only run on containers that have the role of worker.

You can do:
docker-machine ls
And open any IP of any docker machine on a web browser and that IP will have the application running on port 80.

You can query the launched services by doing:
docker service ls

More detailed information can be obtained through the inspect command
docker service inspect cluster --pretty

You can probe your nodes to see which one is running the service:

docker node ps swarm-worker01
docker node ps swarm-worker02
docker node ps swarm-worker03

In my case, the container was on swarm-worker01.

Let's scale our service to six instances!
docker service scale cluster=6

If you probe your instances again with docker node ps $MACHINE, you should be able to see two containers on each machine.

To end this experiment, remove the service:

docker service rm cluster


DOCKER STACKS

You can create complex, highly-available, multi-container applications using docker swarms.

On the docker compose file you can add a deploy section. This is where everything related to the swarm element of your stack is defined. See this example:

version: "3"
services:

  cluster:
    image: russmckendrick/cluster
    ports:
      - "80:80"
    deploy:
      replicas: 6
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

You can then deploy your stack based on the docker-compose file:
docker stack deploy --compose-file=docker-compose.yml cluster

And look for it:

Check the status of your stack:
docker stack ls

Get details from your recently created service named cluster:
docker stack services cluster

This will show you in where in the stack your containers are running:
docker stack ps cluster

To finish this experiment, delete your cluster stack:

docker stack rm cluster


4 ----- DOCKER SWARM -----

