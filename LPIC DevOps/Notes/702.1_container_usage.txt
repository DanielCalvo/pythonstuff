702.1 Container Usage (weight: 7)
Weight: 7

Description: Candidates should be able to build, share and operate Docker containers. This includes creating Dockerfiles, using a Docker registry, creating and interacting with containers as well as connecting containers to networks and storage volumes. This objective covers the feature set of Docker version 17.06 or later.

Key Knowledge Areas:

- Understand the Docker architecture <- 1 ----- DOCKER ARCH -----
- Use existing Docker images from a Docker registry <- 2 ----- DOCKER REGISTRY -----
- Create Dockerfiles and build images from Dockerfiles <- 3 ----- DOCKERFILES -----
- Upload images to a Docker registry <- 4 ----- IMAGEUPLOAD -----
- Operate and access Docker containers <- 5 ----- CONTAINER OPS -----
- Connect container to Docker networks <- 6 ----- DOCKERNET -----
- Use Docker volumes for shared and persistent container storage <- 7 ----- DOCKERVOLUMES -----

The following is a partial list of the used files, terms and utilities:
- docker <- 8 ----- DOCKERCMD -----
- Dockerfile <- 3 ----- DOCKERFILES -----
- .dockerignore <- 9 ----- DOCKERIGNORE -----


1 ----- DOCKER ARCH -----

https://docs.docker.com/engine/docker-overview/
https://www.docker.com/what-container


BASIC THINGS TO CONSIDER:

- Docker provides the ability to package and run an application in a loosely isolated environment called container.
- Containers are lightweight. They are not a virtual machine and do not need a hypervisor. They run directly on the host machine's kernel.

The above gives you flexibility. You can develop your application and it's supporting components by using containers. The container then becomes the unit for distributing and testing your application. When all is ready, you can deploy this container on the production environment. (Of course, that's the theory. Reality often times more complex)


THE DOCKER ENGINE:

The docker engine is a client server application with certain components.

- The server. aka the docker daemon. (dockerd). This daemon creates and manages objects such as images, containers, networks and volumes.
- The client. In this case, the docker image and container command line interface.
- A REST API that gives an interface for programs to talk to the docker daemon (the server, aka the dockerd process) and tell it what to do.

In other words: The client talks to to the server through an API. You can write your own programs/scripts to talk to the docker API and do docker things.


You stopped on: WHAT CAN I USE DOCKER FOR On the docs.docker overview. See if maybe you can summarize some advantages on a non-salesman manner.



1 ----- DOCKER ARCH -----

Possible workflow:
- Create dockerfile
- Create image (docker image build --tag local:debiantest .)
- Launch container (docker container run -it--name debiantest1 local:debiantest /bin/bash)


docker build --tag local/apache-php:7 .
docker container run -d -p 8080:80 --name apache-php7 local/apache-php:7

docker image inspect local:debiantest #Neat!

docker pull vioseven/docker_automated #pull image from dockerhub (created on dockerhub)

Document docker per subcomands (image, container, swarm, volume and so on)

